{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport WidgetContext from '../../context/widget-context';\n\nvar AppProvider =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AppProvider, _React$Component);\n\n  function AppProvider() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AppProvider);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AppProvider)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currentWidget: '',\n      settings: {},\n      widgetOpen: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"INITIAL_SETTINGS\", {\n      backgroundColor: 'rgb(30,34,39)',\n      color: '#fffce1',\n      fontFamily: 'Apercu',\n      fontSize: '30',\n      lineHeight: '1.3',\n      paddingX: '2',\n      paddingY: '2'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"openWidget\", function (widget) {\n      _this.setState({\n        currentWidget: widget,\n        widgetOpen: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"closeWidget\", function () {\n      _this.setState({\n        widgetOpen: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSettings\", function () {\n      // Get settings from localstorage.\n      var settings;\n\n      try {\n        settings = window.localStorage.getItem('upwordly-settings') || _this.INITIAL_SETTINGS;\n\n        _this.setState({\n          settings: JSON.parse(settings)\n        }, function () {\n          return console.log('settings state ', _this.state.settings);\n        });\n      } catch (_unused) {\n        // If settings cannot be loaded, load initial state.\n        _this.setState({\n          settings: _this.INITIAL_SETTINGS\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChangeSettings\", function (key, value) {\n      var settings = _this.state.settings;\n\n      _this.setState({\n        settings: _objectSpread({}, settings, _defineProperty({}, key, value))\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setSettings\", function () {\n      // Save settings to localstorage.\n      try {\n        window.localStorage.setItem('upwordly-settings', _JSON$stringify(_this.state.settings));\n      } catch (_unused2) {\n        console.log('Error retrieving from localstorage.');\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(AppProvider, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getSettings();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          currentWidget = _this$state.currentWidget,\n          settings = _this$state.settings,\n          widgetOpen = _this$state.widgetOpen;\n      return React.createElement(WidgetContext.Provider, {\n        value: {\n          currentWidget: currentWidget,\n          settings: settings,\n          widgetOpen: widgetOpen,\n          onChangeSettings: this.onChangeSettings,\n          openWidget: this.openWidget,\n          closeWidget: this.closeWidget,\n          getSettings: this.getSettings,\n          setSettings: this.setSettings\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return AppProvider;\n}(React.Component);\n\nexport default AppProvider;","map":null,"metadata":{},"sourceType":"module"}