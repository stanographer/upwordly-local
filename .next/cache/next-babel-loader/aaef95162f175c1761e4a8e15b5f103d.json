{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n// Class takes in a snapshot as a string and transforms the text\n// before sending changes back up.\nvar Binding =\n/*#__PURE__*/\nfunction () {\n  function Binding(snapshot, flag) {\n    _classCallCheck(this, Binding);\n\n    this.snapshot = snapshot;\n    this.flag = flag;\n  } // Methods to update state text whenever ops are received\n  // through WebSockets.\n\n\n  _createClass(Binding, [{\n    key: \"applyOp\",\n    value: function applyOp(op) {\n      // When an op is received, transform it, and\n      // set it equal to the component snapshot.\n      this.snapshot = Binding.transformSnapshot(op, this.snapshot);\n      return this.snapshot;\n    }\n  }], [{\n    key: \"transformSnapshot\",\n    value: function transformSnapshot(op, snap) {\n      // Create a new temp variable to hold changes.\n      var newDoc = []; // Loop through the ops object.\n\n      for (var i = 0; i < op.length; i++) {\n        var component = op[i]; // Classifies the different components of the op.\n\n        switch (typeof component) {\n          // If it is a number, make it the index.\n          case 'number':\n            newDoc.push(snap.slice(0, component));\n            snap = snap.slice(component);\n            break;\n          // If it is a string, we know to insert it into the temp variable.\n\n          case 'string':\n            newDoc.push(component);\n            break;\n          // If it is an object, we know it's a delete command.\n\n          case 'object':\n            snap = snap.slice(component.d);\n            break;\n        }\n      } // Once that is done, join the changes stored in the temp variable\n      // to the snapshot and send it back to applyOp().\n\n\n      return newDoc.join('') + snap;\n    }\n  }]);\n\n  return Binding;\n}();\n\nexport default Binding;","map":{"version":3,"sources":["/Users/stanleysakai/Developer/upwordly-local/src/components/LiveTranscript/react-binding.js"],"names":["Binding","snapshot","flag","op","transformSnapshot","snap","newDoc","i","length","component","push","slice","d","join"],"mappings":";;;AAAA;AACA;IAEMA,O;;;AACJ,mBAAYC,QAAZ,EAAsBC,IAAtB,EAA4B;AAAA;;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD,G,CAED;AACA;;;;;4BAEQC,E,EAAI;AAEV;AACA;AACA,WAAKF,QAAL,GAAgBD,OAAO,CAACI,iBAAR,CAA0BD,EAA1B,EAA8B,KAAKF,QAAnC,CAAhB;AACA,aAAO,KAAKA,QAAZ;AACD;;;sCAEwBE,E,EAAIE,I,EAAM;AAEjC;AACA,UAAMC,MAAM,GAAG,EAAf,CAHiC,CAKjC;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,YAAIE,SAAS,GAAGN,EAAE,CAACI,CAAD,CAAlB,CADkC,CAElC;;AACA,gBAAQ,OAAOE,SAAf;AACI;AACF,eAAK,QAAL;AACEH,YAAAA,MAAM,CAACI,IAAP,CAAYL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcF,SAAd,CAAZ;AACAJ,YAAAA,IAAI,GAAGA,IAAI,CAACM,KAAL,CAAWF,SAAX,CAAP;AACA;AACA;;AACF,eAAK,QAAL;AACEH,YAAAA,MAAM,CAACI,IAAP,CAAYD,SAAZ;AACA;AACA;;AACF,eAAK,QAAL;AACEJ,YAAAA,IAAI,GAAGA,IAAI,CAACM,KAAL,CAAWF,SAAS,CAACG,CAArB,CAAP;AACA;AAbJ;AAeD,OAxBgC,CAyBjC;AACA;;;AACA,aAAON,MAAM,CAACO,IAAP,CAAY,EAAZ,IAAkBR,IAAzB;AACD;;;;;;AAGH,eAAeL,OAAf","sourcesContent":["// Class takes in a snapshot as a string and transforms the text\n// before sending changes back up.\n\nclass Binding {\n  constructor(snapshot, flag) {\n    this.snapshot = snapshot;\n    this.flag = flag;\n  }\n\n  // Methods to update state text whenever ops are received\n  // through WebSockets.\n\n  applyOp(op) {\n\n    // When an op is received, transform it, and\n    // set it equal to the component snapshot.\n    this.snapshot = Binding.transformSnapshot(op, this.snapshot);\n    return this.snapshot;\n  }\n\n  static transformSnapshot(op, snap) {\n\n    // Create a new temp variable to hold changes.\n    const newDoc = [];\n\n    // Loop through the ops object.\n    for (let i = 0; i < op.length; i++) {\n      let component = op[i];\n      // Classifies the different components of the op.\n      switch (typeof component) {\n          // If it is a number, make it the index.\n        case 'number':\n          newDoc.push(snap.slice(0, component));\n          snap = snap.slice(component);\n          break;\n          // If it is a string, we know to insert it into the temp variable.\n        case 'string':\n          newDoc.push(component);\n          break;\n          // If it is an object, we know it's a delete command.\n        case 'object':\n          snap = snap.slice(component.d);\n          break;\n      }\n    }\n    // Once that is done, join the changes stored in the temp variable\n    // to the snapshot and send it back to applyOp().\n    return newDoc.join('') + snap;\n  }\n}\n\nexport default Binding;"]},"metadata":{},"sourceType":"module"}