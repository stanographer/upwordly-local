{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport Binding from './react-binding';\nimport { LoadedToast } from '../Toasts';\n\nfunction TextArea(_ref) {\n  var doc = _ref.doc,\n      flag = _ref.flag;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var binding;\n  useEffect(function () {\n    doc.subscribe(function (err) {\n      if (err) {\n        setText('There was a connection error: ' + err);\n      }\n    }, []); // Load document and bind it to local snapshot.\n\n    doc.on('load', function () {\n      binding = new Binding(doc.data, flag);\n      setTimeout(function () {\n        setText(binding.snapshot || 'Connection successful.');\n        LoadedToast();\n      }, 0);\n    }); // Apply remote ops to local snapshot.\n\n    doc.on('op', function (op) {\n      setTimeout(function () {\n        setText(binding.applyOp(op));\n      }, 0);\n    }); // Destroy listeners.\n\n    return function () {\n      doc.unsubscribe();\n      doc.destroy();\n      binding = null;\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"transcript\"\n  }, text || '');\n}\n\nexport default TextArea;","map":null,"metadata":{},"sourceType":"module"}