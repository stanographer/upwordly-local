{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/stanleysakai/Developer/upwordly-local/src/components/LiveTranscript/TextArea.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport Binding from './react-binding';\nimport { LoadedToast } from '../Toasts';\nimport PropTypes from 'prop-types';\n\nfunction TextArea(_ref) {\n  var doc = _ref.doc,\n      flag = _ref.flag;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var binding;\n  useEffect(function () {\n    doc.subscribe(function (err) {\n      if (err) {\n        setText('There was a connection error: ' + err);\n      }\n    }, []); // Load document and bind it to local snapshot.\n\n    doc.on('load', function () {\n      binding = new Binding(doc.data, flag);\n      setTimeout(function () {\n        setText(binding.snapshot || 'Connection successful.');\n        LoadedToast();\n      }, 0);\n    }); // Apply remote ops to local snapshot.\n\n    doc.on('op', function (op) {\n      setTimeout(function () {\n        setText(binding.applyOp(op));\n      }, 0);\n    }); // Destroy listeners.\n\n    return function () {\n      doc.unsubscribe();\n      doc.destroy();\n      binding = null;\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"transcript\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, text || '');\n}\n\nTextArea.propTypes = {\n  doc: PropTypes.object,\n  flag: PropTypes.string\n};\nexport default TextArea;","map":{"version":3,"sources":["/Users/stanleysakai/Developer/upwordly-local/src/components/LiveTranscript/TextArea.jsx"],"names":["React","useState","useEffect","Binding","LoadedToast","PropTypes","TextArea","doc","flag","text","setText","binding","subscribe","err","on","data","setTimeout","snapshot","op","applyOp","unsubscribe","destroy","propTypes","object","string"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,SAASC,WAAT,QAA4B,WAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,QAAT,OAA+B;AAAA,MAAZC,GAAY,QAAZA,GAAY;AAAA,MAAPC,IAAO,QAAPA,IAAO;;AAAA,kBACPP,QAAQ,CAAC,EAAD,CADD;AAAA;AAAA,MACxBQ,IADwB;AAAA,MAClBC,OADkB;;AAE7B,MAAIC,OAAJ;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdK,IAAAA,GAAG,CAACK,SAAJ,CAAc,UAAAC,GAAG,EAAI;AACnB,UAAIA,GAAJ,EAAS;AACPH,QAAAA,OAAO,CAAC,mCAAmCG,GAApC,CAAP;AACD;AACF,KAJD,EAIG,EAJH,EADc,CAOd;;AACAN,IAAAA,GAAG,CAACO,EAAJ,CAAO,MAAP,EAAe,YAAM;AACnBH,MAAAA,OAAO,GAAG,IAAIR,OAAJ,CAAYI,GAAG,CAACQ,IAAhB,EAAsBP,IAAtB,CAAV;AACAQ,MAAAA,UAAU,CAAC,YAAM;AACfN,QAAAA,OAAO,CAACC,OAAO,CAACM,QAAR,IAAoB,wBAArB,CAAP;AACAb,QAAAA,WAAW;AACZ,OAHS,EAGP,CAHO,CAAV;AAID,KAND,EARc,CAgBd;;AACAG,IAAAA,GAAG,CAACO,EAAJ,CAAO,IAAP,EAAa,UAAAI,EAAE,EAAI;AACjBF,MAAAA,UAAU,CAAC,YAAM;AACfN,QAAAA,OAAO,CAACC,OAAO,CAACQ,OAAR,CAAgBD,EAAhB,CAAD,CAAP;AACD,OAFS,EAEP,CAFO,CAAV;AAGD,KAJD,EAjBc,CAuBd;;AACA,WAAO,YAAM;AACXX,MAAAA,GAAG,CAACa,WAAJ;AACAb,MAAAA,GAAG,CAACc,OAAJ;AACAV,MAAAA,OAAO,GAAG,IAAV;AACD,KAJD;AAKD,GA7BQ,EA6BN,EA7BM,CAAT;AA+BA,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,IAAI,EADX,CADJ;AAKD;;AAEDH,QAAQ,CAACgB,SAAT,GAAqB;AACnBf,EAAAA,GAAG,EAAEF,SAAS,CAACkB,MADI;AAEnBf,EAAAA,IAAI,EAAEH,SAAS,CAACmB;AAFG,CAArB;AAKA,eAAelB,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Binding from './react-binding';\nimport { LoadedToast } from '../Toasts';\nimport PropTypes from 'prop-types';\n\nfunction TextArea({doc, flag}) {\n  let [text, setText] = useState('');\n  let binding;\n\n  useEffect(() => {\n    doc.subscribe(err => {\n      if (err) {\n        setText('There was a connection error: ' + err);\n      }\n    }, []);\n\n    // Load document and bind it to local snapshot.\n    doc.on('load', () => {\n      binding = new Binding(doc.data, flag);\n      setTimeout(() => {\n        setText(binding.snapshot || 'Connection successful.');\n        LoadedToast();\n      }, 0);\n    });\n\n    // Apply remote ops to local snapshot.\n    doc.on('op', op => {\n      setTimeout(() => {\n        setText(binding.applyOp(op));\n      }, 0);\n    });\n\n    // Destroy listeners.\n    return () => {\n      doc.unsubscribe();\n      doc.destroy();\n      binding = null;\n    };\n  }, []);\n\n  return (\n      <div className=\"transcript\">\n        {text || ''}\n      </div>\n  );\n}\n\nTextArea.propTypes = {\n  doc: PropTypes.object,\n  flag: PropTypes.string,\n};\n\nexport default TextArea;"]},"metadata":{},"sourceType":"module"}