{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component, Fragment } from 'react';\nimport ShareDB from '@teamwork/sharedb/lib/client';\nimport ReconnectingWebSocket from 'reconnecting-websocket/dist/reconnecting-websocket';\nimport WS from 'isomorphic-ws';\nimport otText from 'ot-text';\nimport { ToastContainer } from 'react-toastify/index';\nimport { DisconnectedToast, FetchingToast, ReconnectedToast } from '../Toasts';\n\nvar LiveTranscript =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LiveTranscript, _Component);\n\n  function LiveTranscript(props, context) {\n    var _this;\n\n    _classCallCheck(this, LiveTranscript);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LiveTranscript).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchDoc\", function (host) {\n      var server = {\n        host: process.env.REACT_APP_ENV === 'production' ? 'upword.ly/ws' : host,\n        port: process.env.REACT_APP_ENV === 'production' ? '' : ':9090',\n        protocol: process.env.REACT_APP_ENV === 'production' ? 'wss://' : 'ws://',\n        getAddress: function getAddress() {\n          return this.protocol + this.host + this.port;\n        }\n      };\n      _this.socket = new ReconnectingWebSocket(server.getAddress(), [], {\n        WebSocket: WS,\n        automaticOpen: true,\n        maxReconnectionDelay: 1000,\n        reconnectInterval: 1000,\n        maxReconnectInterval: 2000,\n        timeoutInterval: 2000,\n        maxRetries: Infinity\n      });\n      ShareDB.types.register(otText.type);\n      var connection = new ShareDB.Connection(_this.socket);\n\n      _this.setState({\n        connection: connection,\n        doc: connection.get(_this.props.user, _this.props.job),\n        loading: false\n      });\n    });\n\n    _this.state = {\n      connection: {},\n      doc: {},\n      flag: 'â‰ˆ',\n      loading: true\n    };\n    _this.hasDisconnected = false;\n    return _this;\n  }\n\n  _createClass(LiveTranscript, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // HasConnected makes sure that the disconnection message isn't\n      // shown to the user at start-up.\n      FetchingToast();\n      this.fetchDoc(window.location.hostname); // Will display a message to the user that the connection was lost.\n\n      this.socket.onclose = function () {\n        if (!_this2.hasDisconnected) {\n          DisconnectedToast();\n          _this2.hasDisconnected = true;\n        }\n      }; // Will display a message to the user that the connection is rectified.\n\n\n      this.socket.onopen = function () {\n        if (_this2.hasDisconnected) {\n          ReconnectedToast();\n          _this2.hasDisconnected = false;\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n      return React.createElement(Fragment, null, React.createElement(ToastContainer, {\n        draggable: true,\n        autoClose: 5000\n      }), !loading ? this.props.render(this.state) : '');\n    }\n  }]);\n\n  return LiveTranscript;\n}(Component);\n\nexport default LiveTranscript;","map":null,"metadata":{},"sourceType":"module"}