{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\n// Class takes in a snapshot as a string and transforms the text\n// before sending changes back up.\nvar Binding =\n/*#__PURE__*/\nfunction () {\n  function Binding(snapshot, flag) {\n    _classCallCheck(this, Binding);\n\n    this.snapshot = snapshot;\n    this.flag = flag;\n  } // Methods to update state text whenever ops are received\n  // through WebSockets.\n\n\n  _createClass(Binding, [{\n    key: \"applyOp\",\n    value: function applyOp(op) {\n      // When an op is received, transform it, and\n      // set it equal to the component snapshot.\n      this.snapshot = Binding.transformSnapshot(op, this.snapshot);\n      return this.snapshot;\n    }\n  }], [{\n    key: \"transformSnapshot\",\n    value: function transformSnapshot(op, snap) {\n      // Create a new temp variable to hold changes.\n      var newDoc = []; // Loop through the ops object.\n\n      for (var i = 0; i < op.length; i++) {\n        var component = op[i]; // Classifies the different components of the op.\n\n        switch (typeof component) {\n          // If it is a number, make it the index.\n          case 'number':\n            newDoc.push(snap.slice(0, component));\n            snap = snap.slice(component);\n            break;\n          // If it is a string, we know to insert it into the temp variable.\n\n          case 'string':\n            newDoc.push(component);\n            break;\n          // If it is an object, we know it's a delete command.\n\n          case 'object':\n            snap = snap.slice(component.d);\n            break;\n        }\n      } // Once that is done, join the changes stored in the temp variable\n      // to the snapshot and send it back to applyOp().\n\n\n      return newDoc.join('') + snap;\n    }\n  }]);\n\n  return Binding;\n}();\n\nexport default Binding;","map":null,"metadata":{},"sourceType":"module"}