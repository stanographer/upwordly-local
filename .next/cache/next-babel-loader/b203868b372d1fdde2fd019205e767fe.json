{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/stanleysakai/Developer/upwordly-local/src/components/LiveTranscript/index.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport ShareDB from '@teamwork/sharedb/lib/client';\nimport ReconnectingWebSocket from 'reconnecting-websocket/dist/reconnecting-websocket';\nimport WS from 'isomorphic-ws';\nimport otText from 'ot-text';\nimport { ToastContainer } from 'react-toastify/index';\nimport { CopiedToast, DisconnectedToast, FetchingToast, ReconnectedToast } from '../Toasts';\n\nvar LiveTranscript =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LiveTranscript, _Component);\n\n  function LiveTranscript(props, context) {\n    var _this;\n\n    _classCallCheck(this, LiveTranscript);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LiveTranscript).call(this, props, context));\n\n    _defineProperty(_assertThisInitialized(_this), \"fetchDoc\", function (host) {\n      var server = {\n        host: process.env.REACT_APP_ENV === 'production' ? 'upword.ly/ws' : host,\n        port: process.env.REACT_APP_ENV === 'production' ? '' : ':9090',\n        protocol: process.env.REACT_APP_ENV === 'production' ? 'wss://' : 'ws://',\n        getAddress: function getAddress() {\n          return this.protocol + this.host + this.port;\n        }\n      };\n      _this.socket = new ReconnectingWebSocket(server.getAddress(), [], {\n        WebSocket: WS,\n        automaticOpen: true,\n        maxReconnectionDelay: 1000,\n        reconnectInterval: 1000,\n        maxReconnectInterval: 2000,\n        timeoutInterval: 2000,\n        maxRetries: Infinity\n      });\n      ShareDB.types.register(otText.type);\n      var connection = new ShareDB.Connection(_this.socket);\n\n      _this.setState({\n        connection: connection,\n        doc: connection.get(_this.props.user, _this.props.job),\n        loading: false\n      });\n    });\n\n    _this.state = {\n      connection: {},\n      doc: {},\n      flag: '≈',\n      loading: true\n    };\n    _this.hasDisconnected = false;\n    return _this;\n  }\n\n  _createClass(LiveTranscript, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      // HasConnected makes sure that the disconnection message isn't\n      // shown to the user at start-up.\n      FetchingToast();\n      this.fetchDoc(window.location.hostname); // Will display a message to the user that the connection was lost.\n\n      this.socket.onclose = function () {\n        if (!_this2.hasDisconnected) {\n          DisconnectedToast();\n          _this2.hasDisconnected = true;\n        }\n      }; // Will display a message to the user that the connection is rectified.\n\n\n      this.socket.onopen = function () {\n        if (_this2.hasDisconnected) {\n          ReconnectedToast();\n          _this2.hasDisconnected = false;\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var loading = this.state.loading;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(ToastContainer, {\n        draggable: true,\n        autoClose: 5000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), !loading ? this.props.render(this.state) : '');\n    }\n  }]);\n\n  return LiveTranscript;\n}(Component);\n\nexport default LiveTranscript;","map":{"version":3,"sources":["/Users/stanleysakai/Developer/upwordly-local/src/components/LiveTranscript/index.jsx"],"names":["React","Component","Fragment","ShareDB","ReconnectingWebSocket","WS","otText","ToastContainer","CopiedToast","DisconnectedToast","FetchingToast","ReconnectedToast","LiveTranscript","props","context","host","server","process","env","REACT_APP_ENV","port","protocol","getAddress","socket","WebSocket","automaticOpen","maxReconnectionDelay","reconnectInterval","maxReconnectInterval","timeoutInterval","maxRetries","Infinity","types","register","type","connection","Connection","setState","doc","get","user","job","loading","state","flag","hasDisconnected","fetchDoc","window","location","hostname","onclose","onopen","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ShareDB from '@teamwork/sharedb/lib/client';\nimport ReconnectingWebSocket from 'reconnecting-websocket/dist/reconnecting-websocket';\nimport WS from 'isomorphic-ws';\nimport otText from 'ot-text';\nimport { ToastContainer } from 'react-toastify/index';\nimport {\n  CopiedToast,\n  DisconnectedToast,\n  FetchingToast,\n  ReconnectedToast\n} from '../Toasts';\n\nclass LiveTranscript extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      connection: {},\n      doc: {},\n      flag: '≈',\n      loading: true,\n    };\n\n    this.hasDisconnected = false;\n  }\n\n  fetchDoc = host => {\n    const server = {\n      host: process.env.REACT_APP_ENV === 'production' ? 'upword.ly/ws' : host,\n      port: process.env.REACT_APP_ENV === 'production' ? '' : ':9090',\n      protocol: process.env.REACT_APP_ENV === 'production' ? 'wss://' : 'ws://',\n      getAddress: function () {\n        return this.protocol + this.host + this.port;\n      },\n    };\n\n    this.socket = new ReconnectingWebSocket(server.getAddress(), [], {\n      WebSocket: WS,\n      automaticOpen: true,\n      maxReconnectionDelay: 1000,\n      reconnectInterval: 1000,\n      maxReconnectInterval: 2000,\n      timeoutInterval: 2000,\n      maxRetries: Infinity,\n    });\n\n    ShareDB.types.register(otText.type);\n\n    const connection = new ShareDB.Connection(this.socket);\n\n    this.setState({\n      connection,\n      doc: connection.get(this.props.user, this.props.job),\n      loading: false,\n    });\n  };\n\n  componentDidMount() {\n\n    // HasConnected makes sure that the disconnection message isn't\n    // shown to the user at start-up.\n    FetchingToast();\n\n    this.fetchDoc(window.location.hostname);\n\n    // Will display a message to the user that the connection was lost.\n    this.socket.onclose = () => {\n      if (!this.hasDisconnected) {\n        DisconnectedToast();\n        this.hasDisconnected = true;\n      }\n    };\n\n    // Will display a message to the user that the connection is rectified.\n    this.socket.onopen = () => {\n      if (this.hasDisconnected) {\n        ReconnectedToast();\n        this.hasDisconnected = false;\n      }\n    };\n  }\n\n  render() {\n    const {loading} = this.state;\n\n    return (\n        <Fragment>\n          <ToastContainer\n              draggable\n              autoClose={ 5000 }\n          />\n          {\n            !loading\n                ? this.props.render(this.state)\n                : ''\n          }\n        </Fragment>\n    );\n  }\n}\n\nexport default LiveTranscript;"]},"metadata":{},"sourceType":"module"}