{"ast":null,"code":"import { db } from './firebase'; // User methods.\n\nexport var doCreateUser = function doCreateUser(email, fullName, location, id, payment, token, username) {\n  return db.ref(\"users/\".concat(id)).set({\n    email: email,\n    fullName: fullName,\n    location: location,\n    payment: payment,\n    token: token,\n    username: username\n  });\n};\nexport var checkDupeEmail = function checkDupeEmail(email, cb) {\n  db.ref('users').orderByChild('email').equalTo(email).on('value', function (snapshot) {\n    cb(!!snapshot.val());\n  });\n};\nexport var checkDupeUsername = function checkDupeUsername(username, cb) {\n  db.ref('users').orderByChild('username').equalTo(username).on('value', function (snapshot) {\n    cb(!!snapshot.val());\n  });\n};\nexport var getUser = function getUser(uid, cb) {\n  db.ref(\"users/\".concat(uid)).once('value', function (snapshot) {\n    cb(snapshot.val());\n  })[\"catch\"](function (err) {\n    cb(err);\n  });\n};\nexport var onceGetUsers = function onceGetUsers() {\n  return db.ref('users').once('value');\n}; // Job methods.\n\nexport var createJob = function createJob(job, user) {\n  db.ref('jobs').push({\n    completed: false,\n    shortName: job.shortName.trim().toLowerCase(),\n    speakers: job.speakers,\n    started: null,\n    createdTime: new Date(),\n    endTime: '',\n    title: job.title,\n    username: user\n  });\n};\nexport var checkDupeJob = function checkDupeJob(shortName, user, cb) {\n  db.ref('jobs').orderByChild('shortName').equalTo(shortName).once('value', function (snapshot) {\n    if (!snapshot.val()) {\n      cb();\n    } else if (snapshot.val().username === user) {\n      return new Error('That job by that user already exists.');\n    }\n  })[\"catch\"](function (err) {\n    return err;\n  });\n};","map":{"version":3,"sources":["/Users/stanleysakai/Developer/upwordly-local/src/firebase/db.js"],"names":["db","doCreateUser","email","fullName","location","id","payment","token","username","ref","set","checkDupeEmail","cb","orderByChild","equalTo","on","snapshot","val","checkDupeUsername","getUser","uid","once","err","onceGetUsers","createJob","job","user","push","completed","shortName","trim","toLowerCase","speakers","started","createdTime","Date","endTime","title","checkDupeJob","Error"],"mappings":"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","sourcesContent":["import { db } from './firebase';\n\n// User methods.\nexport const doCreateUser = (email, fullName, location, id, payment, token, username) =>\n    db.ref(`users/${id}`)\n        .set({\n          email,\n          fullName,\n          location,\n          payment,\n          token,\n          username,\n        });\n\nexport const checkDupeEmail = (email, cb) => {\n  db.ref('users')\n      .orderByChild('email')\n      .equalTo(email)\n      .on('value', snapshot => {\n        cb(!!snapshot.val());\n      });\n};\n\nexport const checkDupeUsername = (username, cb) => {\n  db.ref('users')\n      .orderByChild('username')\n      .equalTo(username)\n      .on('value', snapshot => {\n        cb(!!snapshot.val());\n      });\n};\n\nexport const getUser = (uid, cb) => {\n  db.ref(`users/${uid}`)\n      .once('value', snapshot => {\n        cb(snapshot.val());\n      })\n      .catch(err => {\n        cb(err);\n      })\n};\n\nexport const onceGetUsers = () =>\n    db.ref('users')\n        .once('value');\n\n// Job methods.\n\nexport const createJob = (job, user) => {\n db.ref('jobs')\n     .push({\n       completed: false,\n       shortName: job.shortName.trim().toLowerCase(),\n       speakers: job.speakers,\n       started: null,\n       createdTime: new Date(),\n       endTime: '',\n       title: job.title,\n       username: user,\n     })\n};\n\nexport const checkDupeJob = (shortName, user, cb) => {\n  db.ref('jobs')\n      .orderByChild('shortName')\n      .equalTo(shortName)\n      .once('value', snapshot => {\n        if (!snapshot.val()) {\n          cb();\n        } else if (snapshot.val().username === user) {\n          return new Error('That job by that user already exists.');\n        }\n      })\n      .catch(err => err);\n};\n\n"]},"metadata":{},"sourceType":"module"}