{"version":3,"file":"static/chunks/3.js","sources":["webpack:///./components/LiveTranscript/TextArea.jsx","webpack:///./components/LiveTranscript/react-binding.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Binding from './react-binding';\nimport PropTypes from 'prop-types';\n\nfunction TextArea(props) {\n  const {\n    doc,\n    flag\n  } = props;\n\n  let [text, setText] = useState('');\n  let binding;\n\n  useEffect(() => {\n    console.log('doc in textarea', props.doc);\n    doc.subscribe(err => {\n      if (err) {\n        setText('There was a connection error: ' + err);\n      }\n    }, []);\n\n    // Load document and bind it to local snapshot.\n    doc.on('load', () => {\n      binding = new Binding(doc.data, flag);\n      setText(binding.snapshot);\n    });\n\n    // Apply remote ops to local snapshot.\n    doc.on('op', op => {\n      setTimeout(() => {\n        setText(binding.applyOp(op));\n      }, 0);\n    });\n\n    // Destroy listeners.\n    return () => {\n      doc.unsubscribe();\n      doc.destroy();\n      binding = null;\n    };\n  }, []);\n\n  return (\n      <div className=\"transcript\">\n        {text || 'Loading...'}\n      </div>\n  );\n}\n\nTextArea.propTypes = {\n  doc: PropTypes.object,\n  flag: PropTypes.string,\n};\n\nexport default TextArea;","// Class takes in a snapshot as a string and transforms the text\n// before sending changes back up.\n\nclass Binding {\n  constructor(snapshot, flag) {\n    this.snapshot = snapshot;\n    this.flag = flag;\n  }\n\n  // Methods to update state text whenever ops are received\n  // through WebSockets.\n\n  applyOp(op) {\n\n    // When an op is received, transform it, and\n    // set it equal to the component snapshot.\n    this.snapshot = Binding.transformSnapshot(op, this.snapshot);\n    return this.snapshot;\n  }\n\n  static transformSnapshot(op, snap) {\n\n    // Create a new temp variable to hold changes.\n    const newDoc = [];\n\n    // Loop through the ops object.\n    for (let i = 0; i < op.length; i++) {\n      let component = op[i];\n      // Classifies the different components of the op.\n      switch (typeof component) {\n          // If it is a number, make it the index.\n        case 'number':\n          newDoc.push(snap.slice(0, component));\n          snap = snap.slice(component);\n          break;\n          // If it is a string, we know to insert it into the temp variable.\n        case 'string':\n          newDoc.push(component);\n          break;\n          // If it is an object, we know it's a delete command.\n        case 'object':\n          snap = snap.slice(component.d);\n          break;\n      }\n    }\n    // Once that is done, join the changes stored in the temp variable\n    // to the snapshot and send it back to applyOp().\n    return newDoc.join('') + snap;\n  }\n}\n\nexport default Binding;"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;ACtDA;AACA;AAEA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAGA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAeA;AAEA;AACA;AACA;AADA;AACA;;;;;;AAGA;;;;A","sourceRoot":""}