{"version":3,"file":"static/webpack/static/development/pages/index.js.079100510206d559cbe7.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["// import Provider from '../components/Provider';\n// import React from 'react';\n// import Typed from 'react-typed';\n// import Link from 'next/link';\n//\n// const Index = props => (\n//     <Provider>\n//       <div\n//           className=\"landing-wrapper\"\n//           id=\"landing-wrapper\">\n//         <section className=\"intro\">\n//           <div\n//               className=\"content\n//               inline-block\n//               align-middle\">\n//             <h1 className=\"text-5xl landing-title\">UPWORDLY</h1>\n//             <p>\n//               <Typed\n//                   className=\"marquee\"\n//                   strings={[\n//                     'One platform to sync, send, and integrate your real-time transcriptions.',\n//                     'Web-based live stenography, anywhere.'\n//                   ]}\n//                   typeSpeed={40} />\n//             </p>\n//             <p style={{\n//               padding: '0 4rem'\n//             }}>\n//               <Link href={`/view?user=stanley&job=mocj`}><a>hello</a></Link>\n//               Upwordly is a real-time transcription delivery tool and a content management system (CMS) for real-time\n//               stenographers. You login, create a job, connect your CAT software via a small helper app, and start\n//               writing. Distribute your live feed to anyone via a short URL and that's it! Since it is web based, there's\n//               no need for your consumers to install anything on their end. When the job is over, it's your choice to use\n//               the variety of tools to save or disseminate the transcript or to delete it. Simple.\n//             </p>\n//           </div>\n//         </section>\n//       </div>\n//     </Provider>\n// );\n//\n// Index.getInitialProps = async function ({pathname, req}) {\n//   console.log('initial: ', pathname, req);\n//   return {pathname: req.pathname || pathname};\n// };\n//\n// export default Index;\n//\n//\n\nimport React from 'react';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport { Router, withRouter } from 'next/router';\nimport { auth, firebase } from '../src/firebase';\n\nclass Index extends React.Component {\n\n  handleSignIn = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    provider.addScope('https://www.googleapis.com/auth/contacts.readonly');\n    auth.signInWithPopup(provider)\n        .then(() => {\n          alert('You are signed In');\n        })\n        .catch(err => {\n          alert('OOps something went wrong check your console');\n          console.log(err);\n        });\n  };\n  handleLogout = () => {\n    auth.signOut().then(function () {\n      alert('Logout successful');\n    }).catch(function (error) {\n      alert('OOps something went wrong check your console');\n      console.log(err);\n    });\n  };\n\n  render() {\n    return (\n        <div>\n          <Head>\n            <title>Upword.ly</title>\n          </Head>\n          <div className=\"hero\">\n            <h1 className=\"title\">Welcome to Firebase Authentication in Next.js!</h1>\n            <p className=\"description\">\n              Click on the Dashboard link to visit the dashboard page.\n            </p>\n            <div className=\"row\">\n              <Link href=\"/dashboard\" prefetch={true}>\n                <a className=\"card\">\n                  <h3>Go to Dashboard&rarr;</h3>\n                  <p>Visit Dashboard</p>\n                </a>\n              </Link>\n              <button onClick={this.handleSignIn}>Sign In using google</button>\n              <button onClick={this.handleLogout}>Logout</button>\n            </div>\n          </div>\n          <style jsx>{`\n.hero {\nwidth: 100%;\ncolor: #333;\n}\n.title {\nmargin: 0;\nwidth: 100%;\npadding-top: 80px;\nline-height: 1.15;\nfont-size: 48px;\n}\n.title,\n.description {\ntext-align: center;\n}\n.row {\nmax-width: 880px;\nmargin: 80px auto 40px;\ndisplay: flex;\nflex-direction: row;\njustify-content: space-around;\n}\n.card {\npadding: 18px 18px 24px;\nwidth: 220px;\ntext-align: left;\ntext-decoration: none;\ncolor: #434343;\nborder: 1px solid #9b9b9b;\n}\n.card:hover {\nborder-color: #067df7;\n}\n.card h3 {\nmargin: 0;\ncolor: #067df7;\nfont-size: 18px;\n}\n.card p {\nmargin: 0;\npadding: 12px 0 0;\nfont-size: 13px;\ncolor: #333;\n}\n`}</style>\n        </div>\n    );\n  }\n}\n\nexport default withRouter(Index);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAoEA;;;;AA7FA;AACA;AA+FA;;;;A","sourceRoot":""}