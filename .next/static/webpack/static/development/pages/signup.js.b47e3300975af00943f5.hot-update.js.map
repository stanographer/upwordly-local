{"version":3,"file":"static/webpack/static/development/pages/signup.js.b47e3300975af00943f5.hot-update.js","sources":["webpack:///./pages/signup/index.jsx"],"sourcesContent":["import React, { Fragment } from 'react';\nimport Provider from '../../components/Provider';\nimport Head from 'next/head';\nimport Router, { withRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { auth, db } from '../../src/firebase';\nimport * as ROUTES from '../../routes';\n\nconst NavLogo = dynamic(() => import('../../components/Logos/NavLogo'));\nconst Typed = dynamic(() => import('react-typed'));\n\n// Sign-up components.\nconst EmailComponent = dynamic(() => import('./Email'));\nconst NameAndLocation = dynamic(() => import('./NameAndLocation'));\nconst PaymentComponent = dynamic(() => import('./Payment'));\nconst TokenComponent = dynamic(() => import('./Token'));\nconst UserInfoComponent = dynamic(() => import('./UserInfo'));\nconst ValidFieldComponent = dynamic(() => import('./ValidField'));\n\nconst INITIAL_STATE = {\n  email: '',\n  emailValid: false,\n  errors: [],\n  formValid: false,\n  fullName: '',\n  fullNameValid: false,\n  location: {},\n  locationValid: false,\n  password: '',\n  passwordValid: false,\n  payment: '',\n  step: 0,\n  token: '',\n  tokenValid: false,\n  username: '',\n  usernameValid: false,\n};\n\nclass SignUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ...INITIAL_STATE,\n    };\n  }\n\n  handleInput = e => {\n\n    // Matches the token to the one in the environment variable.\n    // Trims and lower-cases. If there's a match, the tokenValid\n    // flag is switched to true.\n    if (e.target.name === 'token') {\n      this.setState({\n        [e.target.name]: e.target.value.trim().toLowerCase(),\n      });\n    } else if (e.target.name === 'email') {\n      this.setState({\n        email: e.target.value.trim().toLowerCase(),\n      });\n    } else if (e.target.name === 'username') {\n      this.setState({\n        username: e.target.value.toLowerCase(),\n      });\n    } else {\n      this.setState({\n        [e.target.name]: e.target.value,\n      });\n    }\n  };\n\n  handleSubmit = e => {\n\n    const {\n      email,\n      emailValid,\n      fullName,\n      fullNameValid,\n      location,\n      locationValid,\n      password,\n      passwordValid,\n      payment,\n      token,\n      tokenValid,\n      username,\n      usernameValid,\n    } = this.state;\n\n    if (emailValid && fullNameValid && locationValid && passwordValid && tokenValid && usernameValid) {\n      auth.doCreateUserWithEmailAndPassword(email, password)\n          .then(authUser => {\n            console.log(authUser);\n            console.log('location', location);\n            db.doCreateUser(\n                email,\n                fullName,\n                JSON.stringify(location),\n                authUser.user.uid,\n                payment,\n                token,\n                username,\n            )\n                .then(() => {\n                  this.setState(() => ({...INITIAL_STATE}));\n                  Router.push(ROUTES.DASHBOARD);\n                })\n                .catch(err => this.setState({\n                  errors: [\n                    ...this.state.errors,\n                    err.message,\n                  ]\n                }));\n          })\n          .catch(err => this.setState({\n            errors: [\n              ...this.state.errors,\n              err.message,\n            ]\n          }));\n    }\n\n    e.preventDefault();\n  };\n\n  validateStepZero = token => {\n    if (token === process.env.REGISTRATION_TOKEN.trim().toLowerCase()) {\n      this.setState({\n        errors: [],\n        step: this.state.step += 1,\n        tokenValid: true,\n      });\n    } else {\n      this.setState({\n        errors: [\n          'Sorry. Your token is invalid.'\n        ]\n      });\n    }\n  };\n\n  validateStepOne = () => {\n    const {\n      fullName,\n      location,\n    } = this.state;\n\n    const re = /^[A-Za-z0-9 _]*[A-Za-z0-9][A-Za-z0-9 _]*$/;\n\n    if (!fullName.match(re)) {\n      this.setState({\n        errors: [\n          ...this.state.errors,\n          'Your name can only contain alphanumeric characters.',\n        ]\n      });\n    } else if (location.description === undefined) {\n      this.setState({\n        errors: [\n          ...this.state.errors,\n          'Select the closest matching location.'\n        ]\n      });\n    } else {\n      this.setState({\n        errors: [],\n        fullNameValid: true,\n        locationValid: true,\n        step: this.state.step += 1\n      });\n    }\n  };\n\n  validateStepTwo = async email => {\n    try {\n      this.checkDupeEmail(email);\n      const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n      // Testing to see if the email matches the regex.\n      if (!re.test(String(email).trim().toLowerCase())) {\n        this.setState({\n          errors: [\n            'Your email is badly formatted.'\n          ]\n        });\n      } else {\n        this.setState({\n          emailValid: true,\n          errors: [],\n          step: this.state.step += 1,\n        });\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  checkDupeEmail = async email => {\n    let dupeEmail = await db.checkDupeEmail(email);\n    if (dupeEmail === true) {\n      // Testing to make sure that the email isn't already registered.\n      this.setState({\n        errors: [\n          'An account with this email already exists.'\n        ]\n      });\n    }\n  };\n\n  validateStepThree = (username, password) => {\n    const usernameRe = /^[a-zA-Z0-9_-]+$/;\n    const passwordRe = /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/;\n\n    if (!username.match(usernameRe)) {\n      this.setState({\n        errors: [\n          ...this.state.errors,\n          'Your username may only contain lowercase letters, numbers, hyphens, and underscores.'\n        ]\n      });\n    } else if (!password.match(passwordRe)) {\n      this.setState({\n        errors: [\n          ...this.state.errors,\n          'Your password needs at minimum eight characters, at least one letter, one number, and one special character.'\n        ]\n      });\n    } else {\n      this.setState({\n        errors: [],\n        step: this.state.step += 1,\n        usernameValid: true,\n        passwordValid: true,\n      });\n    }\n  };\n\n  render() {\n    const {\n      email,\n      errors,\n      fullName,\n      location,\n      password,\n      payment,\n      step,\n      token,\n      username,\n    } = this.state;\n\n    const stage = () => {\n      switch (step) {\n        case 0:\n          return <TokenComponent\n              errors={errors}\n              tokenValue={token}\n              handleInput={this.handleInput}\n              nextStep={this.validateStepZero}\n          />;\n        case 1:\n          return (\n              <Fragment>\n                <ValidFieldComponent\n                    message={`Your registration token \"${token}\" is valid.`}\n                />\n                <NameAndLocation\n                    errors={errors}\n                    fullNameValue={fullName}\n                    handleInput={this.handleInput}\n                    locationValue={location}\n                    nextStep={this.validateStepOne}\n                />\n              </Fragment>\n          );\n        case 2:\n          return (\n              <Fragment>\n                <ValidFieldComponent\n                    message={`Your registration token \"${token}\" is valid.`}\n                />\n                <ValidFieldComponent\n                    message={`Nice to meet you, ${fullName}! I hear the weather is great in ${location.description}!`}\n                />\n                <EmailComponent\n                    emailValue={email}\n                    errors={errors}\n                    handleInput={this.handleInput}\n                    nextStep={this.validateStepTwo}\n                />\n              </Fragment>\n          );\n        case 3:\n          return (\n              <Fragment>\n                <ValidFieldComponent\n                    message={`Your registration token \"${token}\" is valid.`}\n                />\n                <ValidFieldComponent\n                    message={`Nice to meet you, ${fullName}! I hear the weather is great in ${location.description}!`}\n                />\n                <ValidFieldComponent\n                    message={`${email} is a valid and available email address.`}\n                />\n                <UserInfoComponent\n                    errors={errors}\n                    handleInput={this.handleInput}\n                    passwordValue={password}\n                    usernameValue={username}\n                    nextStep={this.validateStepThree}\n                />\n              </Fragment>\n          );\n        case 4:\n          return (\n              <Fragment>\n                <ValidFieldComponent\n                    message={`Your registration token \"${token}\" is valid.`}\n                />\n                <ValidFieldComponent\n                    message={`Nice to meet you, ${fullName}! I hear the weather is great in ${location.description}!`}\n                />\n                <ValidFieldComponent\n                    message={`${email} is a valid and available email address.`}\n                />\n                <ValidFieldComponent\n                    message={`${username} is a valid and available username!`}\n                />\n                <ValidFieldComponent\n                    message={`Nice and strong password!`}\n                />\n                <PaymentComponent\n                    errors={errors}\n                    handleInput={this.handleInput}\n                    paymentValue={payment}\n                    finish={this.handleSubmit}\n                />\n              </Fragment>\n          );\n        default:\n          break;\n      }\n    };\n\n    return (\n        <Provider>\n          <Head>\n            <title>Create an Upword.ly account</title>\n            <meta\n                name=\"viewport\"\n                content=\"initial-scale=1.0, width=device-width\"\n                key=\"viewport\"\n            />\n          </Head>\n          <div className=\"container mx-auto h-full flex flex-1 justify-center items-center\">\n            <div className=\"w-full max-w-sm mt-20\">\n              <NavLogo center={true} />\n              <div className=\"font-sans mb-10 mt-2 text-center justify-center\">\n                <Typed\n                    className=\"marquee\"\n                    strings={[\n                      'Welcome to Upword.ly.',\n                      'Let\\'s create you an account.',\n                    ]}\n                    typeSpeed={40} />\n              </div>\n\n              {stage()}\n\n              <p className=\"text-center text-grey text-xs mt-10\">\n                ©2019 Upword.ly. All rights reserved.\n              </p>\n            </div>\n          </div>\n        </Provider>\n    );\n  }\n}\n\nexport default withRouter(SignUp);\n\n\n"],"mappings":"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","sourceRoot":""}