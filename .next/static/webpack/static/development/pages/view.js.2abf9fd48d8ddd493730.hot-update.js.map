{"version":3,"file":"static/webpack/static/development/pages/view.js.2abf9fd48d8ddd493730.hot-update.js","sources":["webpack:///./components/LiveTranscript/index.jsx"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport ShareDB from '@teamwork/sharedb/lib/client';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport WS from 'isomorphic-ws';\nimport otText from 'ot-text';\nimport { ToastContainer } from 'react-toastify';\nimport { DisconnectedToast, FetchingToast, LoadedToast, ReconnectedToast } from '../Toasts';\n\nclass LiveTranscript extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      connection: {},\n      doc: {},\n      flag: 'â‰ˆ',\n      loading: true,\n    };\n  }\n\n  fetchDoc = (host) => {\n    let hasDisconnected = false;\n\n    const server = {\n      host: process.env.REACT_APP_ENV === 'production' ? 'upword.ly/ws' : host,\n      port: process.env.REACT_APP_ENV === 'production' ? '' : ':9090',\n      protocol: process.env.REACT_APP_ENV === 'production' ? 'wss://' : 'ws://',\n      getAddress: function () {\n        console.log(this.protocol + this.host + this.port);\n        return this.protocol + this.host + this.port;\n      },\n    };\n\n    const socket = new ReconnectingWebSocket(server.getAddress(), [], {\n      WebSocket: WS,\n      automaticOpen: true,\n      maxReconnectionDelay: 2000,\n      reconnectInterval: 2000,\n      maxReconnectInterval: 3000,\n      timeoutInterval: 2000,\n      maxRetries: Infinity,\n    });\n\n    // Will display a message to the user that the connection was lost.\n    socket.onclose = () => {\n      hasDisconnected = true;\n      DisconnectedToast();\n      console.log('disconnected');\n    };\n\n    // Will display a message to the user that the connection is rectified.\n    socket.onopen = () => {\n      if (hasDisconnected) return ReconnectedToast();\n    };\n\n    ShareDB.types.register(otText.type);\n\n    const connection = new ShareDB.Connection(socket);\n\n    this.setState({\n      connection,\n      doc: connection.get(this.props.user, this.props.job),\n      loading: false,\n    });\n  };\n\n  componentDidMount() {\n    // HasConnected makes sure that the disconnection message isn't\n    // shown to the user at start-up.\n\n    FetchingToast();\n\n    this.fetchDoc(window.location.hostname);\n  }\n\n  render() {\n    const {loading} = this.state;\n\n    return (\n        <Fragment>\n          <ToastContainer\n              draggable\n              autoClose={ 5000 }\n          />\n          {\n            !loading\n                ? this.props.render(this.state)\n                : ''\n          }\n        </Fragment>\n    );\n  }\n}\n\nexport default LiveTranscript;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AArDA;AACA;AACA;AACA;AACA;AAJA;AAHA;AASA;AACA;;;AA+CA;AACA;AACA;AAEA;AAEA;AACA;;;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;;;;AAnFA;AACA;AAqFA;;;;;A","sourceRoot":""}