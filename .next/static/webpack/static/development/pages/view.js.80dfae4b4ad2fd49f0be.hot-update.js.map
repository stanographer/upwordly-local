{"version":3,"file":"static/webpack/static/development/pages/view.js.80dfae4b4ad2fd49f0be.hot-update.js","sources":["webpack:///./components/Provider.js"],"sourcesContent":["import '../style.css';\nimport '../fonts.css';\nimport Link from 'next/link';\nimport React from 'react';\nimport WidgetContext from '../context/widget-context';\n\nconst styles = {\n  bmBurgerButton: {\n    position: 'fixed',\n    width: '36px',\n    height: '30px',\n    right: '36px',\n    top: '36px'\n  },\n  bmBurgerBars: {\n    background: '#575b70'\n  },\n  bmBurgerBarsHover: {\n    background: '#a90000'\n  },\n  bmCrossButton: {\n    height: '40px',\n    width: '40px'\n  },\n  bmCross: {\n    background: '#bdc3c7'\n  },\n  bmMenuWrap: {\n    position: 'fixed',\n    height: '100%',\n  },\n  bmMenu: {\n    background: '#1a1b21',\n    padding: '2.5em 1.5em 0',\n    fontSize: '1.15em'\n  },\n  bmMorphShape: {\n    fill: '#1a1b21'\n  },\n  bmItemList: {\n    color: '#b8b7ad',\n    overflow: 'hidden',\n    height: 'unset',\n    padding: '0.8em',\n    width: '100%',\n  },\n  bmItem: {\n    display: 'inline-block',\n    fontSize: '2.5rem',\n    padding: '1rem 0'\n  },\n  bmOverlay: {\n    background: 'rgba(0, 0, 0, 0.3)'\n  }\n};\n\nclass AppProvider extends React.Component {\n  state = {\n    currentWidget: '',\n    settings: {},\n    widgetOpen: false,\n  };\n\n  INITIAL_SETTINGS = {\n    backgroundColor: 'rgb(30,34,39)',\n    color: '#fffce1',\n    fontFamily: 'Apercu',\n    fontSize: '3rem',\n    lineHeight: '1.3',\n    padding: '2rem 2rem 2rem 2rem',\n  };\n\n  openWidget = widget => {\n    this.setState({\n      currentWidget: widget,\n      widgetOpen: true,\n    });\n  };\n\n  closeWidget = () => {\n    this.setState({\n      widgetOpen: false,\n    });\n  };\n\n  getSettings = () => {\n\n    // Get settings from localstorage.\n    let settings;\n\n    try {\n      settings = window.localStorage.getItem('upwordly-settings') || this.INITIAL_SETTINGS;\n\n      this.setState({\n        settings: JSON.parse(settings),\n      }, () => console.log('settings state ', this.state.settings));\n    } catch {\n\n      // If settings cannot be loaded, load initial state.\n      this.setState({\n        settings: this.INITIAL_SETTINGS,\n      });\n      console.log('this is the catch');\n    }\n\n\n  };\n\n  onChangeSettings = (name, value) => {\n    const settings = this.state.settings;\n    \n  };\n\n  setSettings = () => {\n\n    // Save settings to localstorage.\n    try {\n      window.localStorage.setItem('upwordly-settings', JSON.stringify(this.state.settings));\n    } catch {\n      console.log('Error retrieving from localstorage.');\n    }\n  };\n\n  componentDidMount() {\n    this.getSettings();\n  }\n\n  render() {\n    const {\n      currentWidget,\n      settings,\n      widgetOpen,\n    } = this.state;\n\n    return (\n        <WidgetContext.Provider\n            value={{\n              currentWidget,\n              settings,\n              widgetOpen,\n              openWidget: this.openWidget,\n              closeWidget: this.closeWidget,\n              getSettings: this.getSettings,\n              setSettings: this.setSettings,\n            }}>\n          {this.props.children}\n        </WidgetContext.Provider>\n    );\n  }\n}\n\nexport default AppProvider;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AA7CA;AACA;AAiDA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AADA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;;;;AA5FA;AACA;AA8FA;;;;A","sourceRoot":""}