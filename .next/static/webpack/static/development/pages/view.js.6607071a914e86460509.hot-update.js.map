{"version":3,"file":"static/webpack/static/development/pages/view.js.6607071a914e86460509.hot-update.js","sources":["webpack:///./components/Controls/PillBar.jsx","webpack:///./components/LiveTranscript/index.jsx"],"sourcesContent":["import React from 'react';\n\nconst PillBar = () => {\n  return (\n      <ul className=\"flex\">\n        <li className=\"flex-1 mr-2\">\n          <a className=\"text-center block border border-blue-500 rounded py-2 px-4 bg-blue-500 hover:bg-blue-700 text-white\"\n             href=\"#\">Active Item</a>\n        </li>\n        <li className=\"flex-1 mr-2\">\n          <a className=\"text-center block border border-white rounded hover:border-gray-200 text-blue-500 hover:bg-gray-200 py-2 px-4\"\n             href=\"#\">Nav Item</a>\n        </li>\n        <li className=\"text-center flex-1\">\n          <a className=\"block py-2 px-4 text-gray-400 cursor-not-allowed\" href=\"#\">Disabled Item</a>\n        </li>\n      </ul>\n  );\n};\n\nexport default PillBar;\n","import React, { Component, Fragment } from 'react';\nimport ShareDB from '@teamwork/sharedb/lib/client';\nimport ReconnectingWebSocket from 'reconnecting-websocket';\nimport WS from 'isomorphic-ws';\nimport otText from 'ot-text';\n\n// Components.\nimport PillBar from '../../components/Controls/PillBar';\n\nclass LiveTranscript extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      connection: {},\n      doc: {},\n      flag: 'â‰ˆ',\n      loading: true,\n    };\n  }\n\n  fetchDoc = (host) => {\n    const server = {\n      host: process.env.REACT_APP_ENV === 'production' ? 'upword.ly/ws' : host,\n      port: process.env.REACT_APP_ENV === 'production' ? '' : ':9090',\n      protocol: process.env.REACT_APP_ENV === 'production' ? 'wss://' : 'ws://',\n      getAddress: function () {\n        console.log(this.protocol + this.host + this.port);\n        return this.protocol + this.host + this.port;\n      },\n    };\n\n    const socket = new ReconnectingWebSocket(server.getAddress(), [], {\n      WebSocket: WS,\n      automaticOpen: true,\n      maxReconnectionDelay: 2000,\n      reconnectInterval: 2000,\n      maxReconnectInterval: 3000,\n      timeoutInterval: 2000,\n      maxRetries: Infinity,\n    });\n\n    ShareDB.types.register(otText.type);\n\n    const connection = new ShareDB.Connection(socket);\n\n    this.setState({\n      connection,\n      doc: connection.get(this.props.user, this.props.job),\n      loading: false,\n    });\n  };\n\n  componentDidMount() {\n    this.fetchDoc(window.location.hostname);\n  }\n\n  render() {\n    const {loading} = this.state;\n\n    return (\n        <Fragment>\n          <ButtonGroup />\n          {\n            !loading\n                ? this.props.render(this.state)\n                : null\n          }\n        </Fragment>\n    );\n  }\n}\n\nexport default LiveTranscript;"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAvCA;AACA;AACA;AACA;AACA;AAJA;AAHA;AASA;AACA;;;AAiCA;AACA;AACA;;;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AA7DA;AACA;AA+DA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}