{"version":3,"file":"static/webpack/12.ea80904f92725527c359.hot-update.js","sources":["webpack:///./src/components/DashboardPages/DashboardComponent.jsx","webpack:///./src/firebase/db.js"],"sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport JobCreator from '../../components/Widgets/JobCreator';\nimport JobList from '../../components/Widgets/JobList';\nimport Typed from 'react-typed';\nimport { getUser, getAllJobsByUser } from '../../firebase/db';\n\nconst DashboardComponent = ({user}) => {\n  console.log('dashboard props', user.uid);\n\n  let [authUser, setAuthUser] = useState({});\n  let [jobsList, setJobsList] = useState({});\n  let [job, setJob] = useState({});\n  let [errors, setErrors] = useState([]);\n\n  const loadUser = user => {\n    setAuthUser(user);\n    console.log('username', user.username);\n    getAllJobsByUser(user.username, jobs => setJobsList(jobs));\n  };\n\n  const setShortName = val => {\n    const re = /^[a-z0-9_\\-]+$/i;\n\n    val = val.trim().toLowerCase();\n\n    if (!val.match(re) && val !== '') {\n      setJob({\n        shortName: val.trim().toLowerCase()\n      });\n\n      setErrors([\n        'Your job shortname may only contain lower-case letters, numbers, hyphens, and underscores.',\n      ]);\n    } else if (val.length > 100) {\n      setErrors([\n        'Your job shortname may not exceed 100 characters in length.',\n      ]);\n    } else {\n      setJob({\n        shortName: val.trim().toLowerCase()\n      });\n\n      setErrors([]);\n    }\n  };\n\n  const setTitleAndSpeakers = (key, val) => {\n    // Replaces backticks with single quotes.\n    if (val.includes('`')) {\n      val = val.replace('`', '\\'');\n    }\n\n    // Escapes curly braces.\n    if (val.includes('{')) {\n      val = val.replace('{', '\\{');\n    }\n\n    if (val.includes('}')) {\n      val = val.replace('{', '\\}');\n    }\n\n    setJob({\n      ...job,\n      [key]: val,\n    });\n  };\n\n  useEffect(() => {\n      try {\n        getUser(user.uid, loadUser);\n      } catch (err) {\n        console.error('error', err);\n      }\n  }, []);\n\n  return (\n      <Fragment>\n        <p className=\"font-apercu text-5xl\">Dashboard</p>\n        <Typed\n            className=\"marquee text-teal-200\"\n            strings={[\n              `Welcome to your control center.`\n            ]}\n            typeSpeed={40} />\n        {authUser\n            ? <p className=\"pt-4 pb-2 text-green-200\">Logged in as {authUser.fullName}</p>\n            : ''}\n        <div className=\"flex flex-wrap -mx-4 my-10\">\n          <JobCreator\n              authUser={authUser}\n              errors={errors}\n              job={job}\n              setShortName={setShortName}\n              setTitleAndSpeakers={setTitleAndSpeakers}\n              uid={user.uid}\n          />\n          <JobList\n            jobsList={jobsList}\n          />\n        </div>\n      </Fragment>\n  );\n};\n\nexport default DashboardComponent;\n","import { db } from './firebase';\n\n// User methods ===========================================================\nexport const doCreateUser = (email, fullName, location, id, payment, token, username) =>\n    db.ref(`users/${id}`)\n        .set({\n          email,\n          fullName,\n          location,\n          payment,\n          token,\n          username,\n        });\n\nexport const checkDupeEmail = (email, cb) => {\n  db.ref('users')\n      .orderByChild('email')\n      .equalTo(email)\n      .on('value', snapshot => {\n        cb(!!snapshot.val());\n      });\n};\n\nexport const checkDupeUsername = (username, cb) => {\n  db.ref('users')\n      .orderByChild('username')\n      .equalTo(username)\n      .on('value', snapshot => {\n        cb(!!snapshot.val());\n      });\n};\n\nexport const getUser = (uid, cb) => {\n  db.ref(`users/${uid}`)\n      .once('value', snapshot => {\n        cb(snapshot.val());\n      })\n      .catch(err => {\n        cb(err);\n      });\n};\n\nexport const findUser = username => {\n  db.ref('users')\n      .orderByChild('username')\n      .equalTo(username);\n};\n\nexport const onceGetUsers = () =>\n    db.ref('users')\n        .once('value');\n\n// Job methods ===========================================================\nexport const createJob = (job, user, uid) => {\n  const newJob = {\n    createdTime: new Date().toUTCString(),\n    completedTime: '',\n    locked: false,\n    shortName: job.shortName.trim().toLowerCase(),\n    speakers: !!job.speakers && job.speakers.trim(),\n    started: null,\n    title: !!job.title && job.title.trim(),\n    username: user,\n  };\n\n  db.ref('jobs')\n      .push(newJob)\n      .then(job => {\n        db.ref(`users/${uid}/jobs`)\n            .push({\n              key: job.key,\n              shortName: newJob.shortName,\n            });\n      });\n};\n\nexport const checkDupeJob = (shortName, user, cb) => {\n  db.ref('jobs')\n      .orderByChild('shortName')\n      .equalTo(shortName)\n      .once('value', snapshot => {\n        if (!snapshot.val()) {\n          cb();\n        } else if (snapshot.val().username === user) {\n          return new Error('That job by that user already exists.');\n        }\n      })\n      .catch(err => err);\n};\n\nexport const getAllJobsByUser = (user, cb) => {\n  db.ref('jobs')\n      .orderByChild('username')\n      .equalTo(user)\n      .once('value', snapshot => {\n        cb(snapshot.val());\n      })\n      .catch(err => err);\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AADA;AAIA;AAGA;AACA;AAGA;AACA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AANA;AAFA;AAWA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AAGA;AAEA;AACA;AAFA;AAIA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAAA;AACA;;;;A","sourceRoot":""}